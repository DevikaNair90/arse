tyr <- as.matrix(tyr)
#Creates matrix of x-coordinates and adds a final x-coordinate
txr <- as.matrix(cbind(xxcoord_mat, xxcoord_mat[,ncol(xxcoord_mat)]))
}
#Calculates ARSE for every row x,y
arse <- vector(length = nrow(tyr))
for (i in 1:nrow(tyr)) {
x <- txr[i,]
y <- tyr[i,]
arse[i] = abs(polyarea(x, y))
}
if(saveout == FALSE) return(arse)
if(saveout == TRUE) as.data.frame(data) %>% mutate(arse = arse)
}
arse(data = data1, xcoord = data1[,2:11], ycoord = data1[,12:21], yinvert = FALSE, saveout = TRUE)
arse <- function(data, xcoord, ycoord, ybase = NA, yinvert = FALSE, saveout = FALSE ){
if(is.na(ybase)){ybase <- ycoord[,1]} #baseline defaults to first column of ycoord
if(is.null(data)){
print("ERROR: Need data entry")
}
#Identifies intersection points of cases in which growth might occur and adds them as interpolated points
getintersect <- function(x, y, ybase = NA) {
if(is.na(ybase)){ybase <- (rep(y[,1], length(y)))} #baseline defaults to first column of ycoord
# Find points where x1 is above x2.
above <- ybase > y
# Points always intersect when above = TRUE, then FALSE or reverse
intersect.points <- which(diff(above)!= 0)
# Find the slopes for each line segment.
Y1.slopes <- rep(0,length(y))
Y2.slopes <- (y[intersect.points + 1] - y[intersect.points]) /
(x[intersect.points + 1] - x[intersect.points])
# Find the intersection for each segment
X.points <- x[intersect.points] + ((y[intersect.points] - ybase[intersect.points]) / (Y1.slopes - Y2.slopes))
Y.points <- ybase[intersect.points] + (Y1.slopes*(X.points - intersect.points))
combined <- bind_rows(   # combine rows from...
tibble(x, y),         # table of original, plus
tibble(x = X.points,
y = Y.points)) %>%  # table of interpolations
distinct() %>%         # and drop any repeated rows
arrange(x)             # and sort by X
combined
}
#Creates interpolation points for 'y' datapoints that intersect baseline using 'getintersect' function
yycoord <- list()
ybase2 <- as.data.frame(ybase)[rep(names(as.data.frame(ybase)), length(ycoord))]
for (g in 1:nrow(ycoord)) {
yycoord[[g]] <- (getintersect(x = as.numeric(xcoord[g,]), y = as.numeric(ycoord[g,]), ybase = as.numeric(ybase2[g,]))[,2])[[1]]
}
yycoord_mat <- matrix(NA, nrow = length(yycoord), ncol = max(sapply(yycoord,length)))
for (m in 1:nrow(yycoord_mat)) {
yycoord_mat[m,1:length(yycoord[[m]])] <- yycoord[[m]]
yycoord_mat[m,is.na(yycoord_mat[m,])] <- ybase[m]
}
#Creates interpolation points for 'x' datapoints that intersect baseline using 'getintersect' function
xxcoord <- list()
ybase2 <- as.data.frame(ybase)[rep(names(as.data.frame(ybase)), length(ycoord))]
for (g in 1:nrow(xcoord)) {
xxcoord[[g]] <- (getintersect(x = as.numeric(xcoord[g,]), y = as.numeric(ycoord[g,]), ybase = as.numeric(ybase2[g,]))[,1])[[1]]
}
xxcoord_mat <- matrix(NA, nrow = length(xxcoord), ncol = max(sapply(xxcoord,length)))
for (m in 1:nrow(xxcoord_mat)) {
xxcoord_mat[m,1:length(xxcoord[[m]])] <- xxcoord[[m]]
xxcoord_mat[m,is.na(xxcoord_mat[m,])] <- max(xxcoord[[m]])
}
if (yinvert == TRUE) {
#Creates matrix of y-coordinates and adds a final y-coordinate at the baseline
tyr <-  as.data.frame(yycoord_mat) %>% mutate(baseline = ybase)
for (i in 1:nrow(tyr)) {
tyr[i,] <- pmax(tyr$baseline[i],tyr[i,])
}
tyr <- as.matrix(tyr)
#Creates matrix of x-coordinates and adds a final x-coordinate
txr <- as.matrix(cbind(xxcoord_mat, xxcoord_mat[,ncol(xxcoord_mat)]))
} else {
#Creates matrix of y-coordinates and adds a final y-coordinate at the baseline
tyr <-  as.data.frame(yycoord_mat) %>% mutate(baseline = ybase)
for (i in 1:nrow(tyr)) {
tyr[i,] <- pmin(tyr$baseline[i],tyr[i,])
}
tyr <- as.matrix(tyr)
#Creates matrix of x-coordinates and adds a final x-coordinate
txr <- as.matrix(cbind(xxcoord_mat, xxcoord_mat[,ncol(xxcoord_mat)]))
}
#Calculates ARSE for every row x,y
arse <- vector(length = nrow(tyr))
for (i in 1:nrow(tyr)) {
x <- txr[i,]
y <- tyr[i,]
arse[i] = abs(polyarea(x, y))
}
if(saveout == FALSE) return(arse)
if(saveout == TRUE) as.data.frame(data) %>% mutate(arse = arse)
}
arse(data = data1, xcoord = data1[,2:11], ycoord = data1[,12:21], yinvert = FALSE, saveout = TRUE)
arse(data = dataset1, xcoord = dataset1[,1:10], ycoord = dataset1[,11:20], saveout = TRUE)
arse <- function(data, xcoord, ycoord, ybase = NA, yinvert = FALSE, saveout = FALSE ){
if(is.na(ybase[1]) == TRUE) {ybase <- ycoord[,1]} #baseline defaults to first column of ycoord
if(is.null(data)){
print("ERROR: Need data entry")
}
#Identifies intersection points of cases in which growth might occur and adds them as interpolated points
getintersect <- function(x, y, ybase = NA) {
if(is.na(ybase[1]) == TRUE){ybase <- (rep(y[,1], length(y)))} #baseline defaults to first column of ycoord
# Find points where x1 is above x2.
above <- ybase > y
# Points always intersect when above = TRUE, then FALSE or reverse
intersect.points <- which(diff(above)!= 0)
# Find the slopes for each line segment.
Y1.slopes <- rep(0,length(y))
Y2.slopes <- (y[intersect.points + 1] - y[intersect.points]) /
(x[intersect.points + 1] - x[intersect.points])
# Find the intersection for each segment
X.points <- x[intersect.points] + ((y[intersect.points] - ybase[intersect.points]) / (Y1.slopes - Y2.slopes))
Y.points <- ybase[intersect.points] + (Y1.slopes*(X.points - intersect.points))
combined <- bind_rows(   # combine rows from...
tibble(x, y),         # table of original, plus
tibble(x = X.points,
y = Y.points)) %>%  # table of interpolations
distinct() %>%         # and drop any repeated rows
arrange(x)             # and sort by X
combined
}
#Creates interpolation points for 'y' datapoints that intersect baseline using 'getintersect' function
yycoord <- list()
ybase2 <- as.data.frame(ybase)[rep(names(as.data.frame(ybase)), length(ycoord))]
for (g in 1:nrow(ycoord)) {
yycoord[[g]] <- (getintersect(x = as.numeric(xcoord[g,]), y = as.numeric(ycoord[g,]), ybase = as.numeric(ybase2[g,]))[,2])[[1]]
}
yycoord_mat <- matrix(NA, nrow = length(yycoord), ncol = max(sapply(yycoord,length)))
for (m in 1:nrow(yycoord_mat)) {
yycoord_mat[m,1:length(yycoord[[m]])] <- yycoord[[m]]
yycoord_mat[m,is.na(yycoord_mat[m,])] <- ybase[m]
}
#Creates interpolation points for 'x' datapoints that intersect baseline using 'getintersect' function
xxcoord <- list()
ybase2 <- as.data.frame(ybase)[rep(names(as.data.frame(ybase)), length(ycoord))]
for (g in 1:nrow(xcoord)) {
xxcoord[[g]] <- (getintersect(x = as.numeric(xcoord[g,]), y = as.numeric(ycoord[g,]), ybase = as.numeric(ybase2[g,]))[,1])[[1]]
}
xxcoord_mat <- matrix(NA, nrow = length(xxcoord), ncol = max(sapply(xxcoord,length)))
for (m in 1:nrow(xxcoord_mat)) {
xxcoord_mat[m,1:length(xxcoord[[m]])] <- xxcoord[[m]]
xxcoord_mat[m,is.na(xxcoord_mat[m,])] <- max(xxcoord[[m]])
}
if (yinvert == TRUE) {
#Creates matrix of y-coordinates and adds a final y-coordinate at the baseline
tyr <-  as.data.frame(yycoord_mat) %>% mutate(baseline = ybase)
for (i in 1:nrow(tyr)) {
tyr[i,] <- pmax(tyr$baseline[i],tyr[i,])
}
tyr <- as.matrix(tyr)
#Creates matrix of x-coordinates and adds a final x-coordinate
txr <- as.matrix(cbind(xxcoord_mat, xxcoord_mat[,ncol(xxcoord_mat)]))
} else {
#Creates matrix of y-coordinates and adds a final y-coordinate at the baseline
tyr <-  as.data.frame(yycoord_mat) %>% mutate(baseline = ybase)
for (i in 1:nrow(tyr)) {
tyr[i,] <- pmin(tyr$baseline[i],tyr[i,])
}
tyr <- as.matrix(tyr)
#Creates matrix of x-coordinates and adds a final x-coordinate
txr <- as.matrix(cbind(xxcoord_mat, xxcoord_mat[,ncol(xxcoord_mat)]))
}
#Calculates ARSE for every row x,y
arse <- vector(length = nrow(tyr))
for (i in 1:nrow(tyr)) {
x <- txr[i,]
y <- tyr[i,]
arse[i] = abs(polyarea(x, y))
}
if(saveout == FALSE) return(arse)
if(saveout == TRUE) as.data.frame(data) %>% mutate(arse = arse)
}
arse(data = data1, xcoord = data1[,2:11], ycoord = data1[,12:21], yinvert = FALSE, saveout = TRUE)
devtools::build_win()
library(pracma)
library(dplyr)
devtools::load_all()
data1 <- read.csv(file.choose(), header = T)
aog(data = data1, xcoord = data1[,2:11], ycoord = data1[,12:21], yinvert = FALSE, saveout = TRUE)
arse(data = data1, xcoord = data1[,2:11], ycoord = data1[,12:21], yinvert = FALSE, saveout = TRUE)
arse_s(data = data1, xcoord = data1[,2:11], ycoord = data1[,12:21], yinvert = FALSE, saveout = TRUE)
arse_ts(data = data1, xcoord = data1[,2:11], ycoord = data1[,12:21], yinvert = FALSE, saveout = TRUE)
arse_t(data = data1, xcoord = data1[,2:11], ycoord = data1[,12:21], yinvert = FALSE, saveout = TRUE)
count_rapidity(data = data1, ycoord = data1[,12:21], yinvert = FALSE, saveout = TRUE)
getintersectx(data=data1, xcoord=data1[,2:11], ycoord = data1[,12:21])
mean_robust(data=data1, ycoord = data1[,12:21], yinvert = FALSE, saveout = TRUE)
plot_arse(xcoord=c(1,2,3,4,5,6,7,8,9,10), ycoord=c(75,53,37,25,27,35,50,75,75,75), ybase=75, ll=0, ul=100)
ynadir(data=data1, ycoord=data1[,12:21], yinvert = FALSE, saveout = TRUE)
xc <- t(c(1,2,3,4,5,6,7,8,9,10))
yc <- t(c(75,53,37,25,95,35,50,75,75,75))
dataset1 <- data.frame(xc, yc)
getintersectx(data = dataset1, xcoord = dataset1[,1:10], ycoord = dataset1[,11:20])
xc <- t(c(1,2,3,4,5,6,7,8,9,10))
yc <- t(c(75,53,37,25,27,35,50,75,75,75))
dataset1 <- data.frame(xc, yc)
arse(data = dataset1, xcoord = dataset1[,1:10], ycoord = dataset1[,11:20], saveout = TRUE)
xc <- t(c(1,2,3,4,5,6,7,8,9,10))
yc <- t(c(75,53,37,25,27,95,80,75,75,75))
dataset1 <- data.frame(xc, yc)
aog(data = dataset1, xcoord = dataset1[,1:10], ycoord = dataset1[,11:20], saveout = TRUE)
xc <- t(c(1,2,3,4,5,6,7,8,9,10))
yc <- t(c(75,53,37,25,27,95,80,75,75,75))
dataset1 <- data.frame(xc, yc)
arse_t(data = dataset1, xcoord = dataset1[,1:10], ycoord = dataset1[,11:20], saveout = TRUE)
xc <- t(c(1,2,3,4,5,6,7,8,9,10))
yc <- t(c(75,53,37,25,27,35,46,49,49,51))
dataset1 <- data.frame(xc, yc)
arse_s(data = dataset1, xcoord = dataset1[,1:10], ycoord = dataset1[,11:20], saveout = TRUE)
xc <- t(c(1,2,3,4,5,6,7,8,9,10))
yc <- t(c(75,75,77,79,80,81,77,76,77,77))
dataset1 <- data.frame(xc, yc)
arse_ts(data = dataset1, xcoord = dataset1[,1:10], ycoord = dataset1[,11:20], saveout = TRUE)
xc <- t(c(1,2,3,4,5,6,7,8,9,10))
yc <- t(c(75,53,37,25,27,35,50,75,75,75))
dataset1 <- data.frame(xc, yc)
plot_arse(xcoord = as.numeric(dataset1[,1:10]),
ycoord = as.numeric(dataset1[,11:20]), ll = 0, ul = 100)
yc <- t(c(75,53,37,25,27,35,50,75,75,75))
dataset1 <- data.frame(yc)
ynadir(data = dataset1, ycoord = yc, saveout = TRUE)
yc <- t(c(75,53,37,25,27,35,50,75,75,75))
dataset1 <- data.frame(yc)
mean_robust(data = dataset1, ycoord = yc, saveout = TRUE)
xc <- t(c(1,2,3,4,5,6,7,8,9,10))
yc <- t(c(75,53,37,25,27,35,50,75,75,75))
dataset1 <- data.frame(xc, yc)
plot_arse(xcoord=as.numeric(dataset1[,1:10]), ycoord = as.numeric(dataset1[,11:20]), ll=0, ul=100)
xc <- t(c(1,2,3,4,5,6,7,8,9,10))
yc <- t(c(75,53,37,25,27,35,50,75,75,75))
dataset1 <- data.frame(xc, yc)
count_rapidity(data = dataset1, ycoord = dataset1[,11:20], saveout = TRUE)
arse(data = data1, xcoord = data1[,2:11], ycoord = data1[,12:21], yinvert = FALSE, saveout = TRUE)
library(arse)
library(dplyr)
library(pracma)
head(stress_appraisal, 10) # shows the first ten rows of the 'stress_appraisal' ficticious data set found in the arse package
plot_arse(xcoord = as.integer(stress_appraisal[1,3:7]), ycoord = as.integer(stress_appraisal[1, 8:12]),
ll=0, ul=100, xlab = "Trial Number", ylab = "Number of Pegs")
arse(data = stress_appraisal, xcoord = stress_appraisal[1, 3:7], ycoord = stress_appraisal[1, 8:12])
arse_t(data = stress_appraisal, xcoord = stress_appraisal[1, 3:7], ycoord = stress_appraisal[1, 8:12])
arse_s(data = stress_appraisal, xcoord = stress_appraisal[1, 3:7], ycoord = stress_appraisal[1, 8:12])
arse_s(data = stress_appraisal, xcoord = stress_appraisal[1, 3:7], ycoord = stress_appraisal[1, 8:12])
library(pracma)
library(dplyr)
devtools::load_all()
library(pracma)
library(dplyr)
devtools::load_all()
library(arse)
library(dplyr)
library(pracma)
head(stress_appraisal, 10) # shows the first ten rows of the 'stress_appraisal' ficticious data set found in the arse package
head(stress_appraisal, 10) # shows the first ten rows of the 'stress_appraisal' ficticious data set found in the arse package
plot_arse(xcoord = as.integer(stress_appraisal[1,3:7]), ycoord = as.integer(stress_appraisal[1, 8:12]),
ll=0, ul=100, xlab = "Trial Number", ylab = "Number of Pegs")
arse(data = stress_appraisal, xcoord = stress_appraisal[1, 3:7], ycoord = stress_appraisal[1, 8:12])
?arse
plot_arse(xcoord = as.integer(stress_appraisal[1,3:7]), ycoord = as.integer(stress_appraisal[1, 8:12]),
ll=0, ul=100, xlab = "Trial Number", ylab = "Number of Pegs")
devtools::load_all()
arse_t(data = stress_appraisal, xcoord = stress_appraisal[1, 3:7], ycoord = stress_appraisal[1, 8:12], saveout = TRUE)
install.packages("arse")
install.packages("arse")
library(arse)
library(pracma)
library(dplyr)
devtools::load_all()
plot_arse(xcoord = as.integer(stress_appraisal[4,3:7]), ycoord = as.integer(stress_appraisal[4, 8:12]),
ll=0, ul=100, xlab = "Trial Number", ylab = "Number of Pegs")
# Required R packages that need to be loaded
library(arse)
library(dplyr)
library(pracma)
aog(data = stress_appraisal, xcoord = stress_appraisal[4, 3:7], ycoord = stress_appraisal[4, 8:12])
aog(data = stress_appraisal, xcoord = stress_appraisal[4, 3:7], ycoord = stress_appraisal[4, 8:12])
arse(data = stress_appraisal, xcoord = stress_appraisal[4, 3:7], ycoord = stress_appraisal[4, 8:12])
arse_t(data = stress_appraisal, xcoord = stress_appraisal[4, 3:7], ycoord = stress_appraisal[4, 8:12], saveout = TRUE)
arse_t(data = stress_appraisal, xcoord = stress_appraisal[4, 3:7], ycoord = stress_appraisal[4, 8:12], saveout = TRUE)
arse_t(data = stress_appraisal, xcoord = stress_appraisal[4, 3:7], ycoord = stress_appraisal[4, 8:12], saveout = TRUE)
arse_t(data = stress_appraisal, xcoord = stress_appraisal[4, 3:7], ycoord = stress_appraisal[4, 8:12], saveout = TRUE)
arse_t(data = stress_appraisal, xcoord = stress_appraisal[4, 3:7], ycoord = stress_appraisal[4, 8:12], saveout = TRUE)
arse_t(data = stress_appraisal, xcoord = stress_appraisal[4, 3:7], ycoord = stress_appraisal[4, 8:12], saveout = TRUE)
arse_t(data = stress_appraisal, xcoord = stress_appraisal[4, 3:7], ycoord = stress_appraisal[4, 8:12], saveout = TRUE)
arse_t(data = stress_appraisal, xcoord = stress_appraisal[4, 3:7], ycoord = stress_appraisal[4, 8:12], saveout = TRUE)
arse_t(data = stress_appraisal, xcoord = stress_appraisal[4, 3:7], ycoord = stress_appraisal[4, 8:12], saveout = TRUE)
arse_t(data = stress_appraisal, xcoord = stress_appraisal[4, 3:7], ycoord = stress_appraisal[4, 8:12], saveout = TRUE)
kable(head(stress_appraisal[3:13]))
Table <- arse_t(data = stress_appraisal, xcoord = stress_appraisal[4, 3:7], ycoord = stress_appraisal[4, 8:12], saveout = TRUE)
Table[,3:13]
Table <- arse_t(data = stress_appraisal, xcoord = stress_appraisal[4, 3:7], ycoord = stress_appraisal[4, 8:12], saveout = TRUE)
Table[,3:14]
Table <- arse_t(data = stress_appraisal, xcoord = stress_appraisal[4, 3:7], ycoord = stress_appraisal[4, 8:12], saveout = TRUE)
Table[,3:14]
Table <- arse_t(data = stress_appraisal, xcoord = stress_appraisal[4, 3:7], ycoord = stress_appraisal[4, 8:12], saveout = TRUE)
Table[,3:13]
Table <- arse_t(data = stress_appraisal, xcoord = stress_appraisal[4, 3:7], ycoord = stress_appraisal[4, 8:12], saveout = TRUE)
Table[,2:13]
Table <- arse_t(data = stress_appraisal, xcoord = stress_appraisal[4, 3:7], ycoord = stress_appraisal[4, 8:12], saveout = TRUE)
Table[,2:12]
Table <- arse_t(data = stress_appraisal, xcoord = stress_appraisal[4, 3:7], ycoord = stress_appraisal[4, 8:12], saveout = TRUE)
Table[,5:12]
Table <- arse_t(data = stress_appraisal, xcoord = stress_appraisal[4, 3:7], ycoord = stress_appraisal[4, 8:12], saveout = TRUE)
Table[,5:13]
Table <- arse_t(data = stress_appraisal, xcoord = stress_appraisal[4, 3:7], ycoord = stress_appraisal[4, 8:12], saveout = TRUE)
Table[,5:13]
arse_t(data = stress_appraisal, xcoord = stress_appraisal[4, 3:7], ycoord = stress_appraisal[4, 8:12])
arse_s(data = stress_appraisal, xcoord = stress_appraisal[1, 3:7], ycoord = stress_appraisal[1, 8:12])
arse_ts(data = stress_appraisal, xcoord = stress_appraisal[1, 3:7], ycoord = stress_appraisal[1, 8:12])
arse_ts(data = stress_appraisal, xcoord = stress_appraisal[4, 3:7], ycoord = stress_appraisal[4, 8:12])
arse(data = stress_appraisal, xcoord = stress_appraisal[3:7], ycoord = stress_appraisal[8:12], saveout = TRUE)
# Returns area of resilience to stress event (ARSE) for entire sample with modified data set including calculated ARSE values
(arse(data = stress_appraisal, xcoord = stress_appraisal[3:7], ycoord = stress_appraisal[8:12], saveout = TRUE)[,2:13])
# Returns area of resilience to stress event (ARSE) for entire sample with modified data set including calculated ARSE values
(arse(data = stress_appraisal, xcoord = stress_appraisal[3:7], ycoord = stress_appraisal[8:12], saveout = TRUE)[,4:13])
# Returns area of resilience to stress event scaled total (ARSE_TS) for single subject
arse_ts(data = stress_appraisal, xcoord = stress_appraisal[4, 3:7], ycoord = stress_appraisal[4, 8:12])
# Returns area of resilience to stress event (ARSE) for entire sample with modified data set including calculated ARSE values
(arse(data = stress_appraisal, xcoord = stress_appraisal[3:7], ycoord = stress_appraisal[8:12], saveout = TRUE)[,4:13])
# Returns area of resilience to stress event (ARSE_T) for entire sample with modified data set including calculated ARSE values
(arse_t(data = stress_appraisal, xcoord = stress_appraisal[3:7], ycoord = stress_appraisal[8:12], saveout = TRUE)[,4:13])
# Returns area of resilience to stress event scaled (ARSE_S) for entire sample with modified data set including calculated ARSE_S values
(arse_s(data = stress_appraisal, xcoord = stress_appraisal[3:7], ycoord = stress_appraisal[8:12], saveout = TRUE)[,4:13])
# Returns area of resilience to stress event total scaled (ARSE_TS) for entire sample with modified data set including calculated ARSE_TS values
(arse_ts(data = stress_appraisal, xcoord = stress_appraisal[3:7], ycoord = stress_appraisal[8:12], saveout = TRUE)[,4:13])
# Returns area of resilience to stress event (ARSE) for entire sample with modified data set including calculated ARSE values
(arse_ts(data = stress_appraisal, xcoord = stress_appraisal[3:7], ycoord = stress_appraisal[8:12], saveout = TRUE)[,4:13])
# Returns area of resilience to stress event (ARSE) for entire sample with modified data set including calculated ARSE values
data1 <- arse_ts(data = stress_appraisal, xcoord = stress_appraisal[3:7], ycoord = stress_appraisal[8:12], saveout = TRUE)
t.test(data1, data1$arse_ts ~ data1$group)
# Returns area of resilience to stress event (ARSE) for entire sample with modified data set including calculated ARSE values
data1 <- arse_ts(data = stress_appraisal, xcoord = stress_appraisal[3:7], ycoord = stress_appraisal[8:12], saveout = TRUE)
t.test(data1, data1$arse_ts ~ data1$group)
# Returns area of resilience to stress event (ARSE) for entire sample with modified data set including calculated ARSE values
data1 <- arse_ts(data = stress_appraisal, xcoord = stress_appraisal[3:7], ycoord = stress_appraisal[8:12], saveout = TRUE)
t.test(data1$arse_ts ~ data1$group)
?t.test
# Returns area of resilience to stress event (ARSE) for entire sample with modified data set including calculated ARSE values
data1 <- arse_ts(data = stress_appraisal, xcoord = stress_appraisal[3:7], ycoord = stress_appraisal[8:12], saveout = TRUE)
t.test(data1$arse_ts ~ data1$group)
boxplot(data1$arse_ts~data1$group, data = data1,
xlab="Trials", ylab="Number of Pegs")
# Returns area of resilience to stress event (ARSE) for entire sample with modified data set including calculated ARSE values
data1 <- arse_ts(data = stress_appraisal, xcoord = stress_appraisal[3:7], ycoord = stress_appraisal[8:12], saveout = TRUE)
t.test(data1$arse_ts ~ data1$group)
boxplot(data1$arse_ts~data1$group, data = data1,
xlab="Trials", ylab="Number of Pegs")
# Returns area of resilience to stress event (ARSE) for entire sample with modified data set including calculated ARSE values
data1 <- arse_ts(data = stress_appraisal, xcoord = stress_appraisal[3:7], ycoord = stress_appraisal[8:12], saveout = TRUE)
boxplot(data1$arse_ts~data1$group, data = data1,
xlab="Trials", ylab="Number of Pegs")
t.test(data1$arse_ts ~ data1$group)
# Returns area of resilience to stress event (ARSE) for entire sample with modified data set including calculated ARSE values
data1 <- arse_ts(data = stress_appraisal, xcoord = stress_appraisal[3:7], ycoord = stress_appraisal[8:12], saveout = TRUE)
t.test(data1$arse_ts ~ data1$group)
boxplot(data1$arse_ts~data1$group, data = data1,
xlab="Trials", ylab="Number of Pegs")
data1 <- read.csv(file.choose(), header = T)
View(data1)
boxplot(data1$arse_ts~data1$group, data = data1,
xlab="Trials", ylab="Number of Pegs")
# Required R packages that need to be loaded
library(arse)
library(dplyr)
library(pracma)
# Returns area of resilience to stress event (ARSE) for entire sample with modified data set including calculated ARSE values
data1 <- arse_ts(data = stress_appraisal, xcoord = stress_appraisal[3:7], ycoord = stress_appraisal[8:12], saveout = TRUE)
t.test(data1$arse_ts ~ data1$group)
boxplot(data1$arse_ts~data1$group, data = data1,
xlab="Trials", ylab="Number of Pegs")
plot_arse(xcoord = as.integer(stress_appraisal[1,3:7]),
ycoord = c(mean(ycoord[,8]),mean(ycoord[,9]),mean(ycoord[,10]),mean(ycoord[,11]),mean(ycoord[,12])),
ll=0, ul=100, xlab = "Trial Number", ylab = "Number of Pegs")
plot_arse(xcoord = as.integer(stress_appraisal[1,3:7]),
ycoord = c(mean(stress_appraisal[,8]),mean(stress_appraisal[,9]),mean(stress_appraisal[,10]),mean(stress_appraisal[,11]),
mean(stress_appraisal[,12])), ll=0, ul=100, xlab = "Trial Number", ylab = "Number of Pegs")
plot_arse(xcoord = as.integer(stress_appraisal[1,3:7]),
ycoord = if stress_appraisal$group = control, c(mean(stress_appraisal[,8]),mean(stress_appraisal[,9]),mean(stress_appraisal[,10]),mean(stress_appraisal[,11]),
stress_appraisal <- select(stress_appraisal, stress_appraisal$group = "Control")
stress_appraisal <- select(stress_appraisal, stress_appraisal$group == "Control")
stress_appraisal <- filter(stress_appraisal, stress_appraisal$group == "Control")
plot_arse(xcoord = as.integer(stress_appraisal[1,3:7]),
ycoord = c(mean(stress_appraisal[,8]),mean(stress_appraisal[,9]),mean(stress_appraisal[,10]),mean(stress_appraisal[,11]),
mean(stress_appraisal[,12])), ll=0, ul=100, xlab = "Trial Number", ylab = "Number of Pegs")
stress_appraisal <- filter(stress_appraisal, stress_appraisal$group == "Appraisal_Training")
plot_arse(xcoord = as.integer(stress_appraisal[1,3:7]),
ycoord = c(mean(stress_appraisal[,8]),mean(stress_appraisal[,9]),mean(stress_appraisal[,10]),mean(stress_appraisal[,11]),
mean(stress_appraisal[,12])), ll=0, ul=100, xlab = "Trial Number", ylab = "Number of Pegs")
stress_appraisal <- filter(stress_appraisal, stress_appraisal$group == "Appraisal_Training")
plot_arse(xcoord = as.integer(stress_appraisal[1,3:7]),
ycoord = c(mean(stress_appraisal[,8]),mean(stress_appraisal[,9]),mean(stress_appraisal[,10]),mean(stress_appraisal[,11]),
mean(stress_appraisal[,12])), ll=0, ul=1000, xlab = "Trial Number", ylab = "Number of Pegs")
stress_appraisal <- filter(stress_appraisal, stress_appraisal$group = "Appraisal_Training")
stress_appraisal <- filter(stress_appraisal, stress_appraisal$group == "Control")
plot_arse(xcoord = as.integer(stress_appraisal[1,3:7]),
ycoord = c(mean(stress_appraisal[,8]),mean(stress_appraisal[,9]),mean(stress_appraisal[,10]),mean(stress_appraisal[,11]),
mean(stress_appraisal[,12])), ll=0, ul=100, xlab = "Trial Number", ylab = "Number of Pegs")
stress_appraisal <- filter(stress_appraisal, stress_appraisal$group == "Control")
plot_arse(xcoord = as.integer(stress_appraisal[1,3:7]),
ycoord = c(mean(stress_appraisal[,8]),mean(stress_appraisal[,9]),mean(stress_appraisal[,10]),mean(stress_appraisal[,11]),
mean(stress_appraisal[,12])), ll=0, ul=100, xlab = "Trial Number", ylab = "Number of Pegs")
stress_appraisal <- filter(stress_appraisal, stress_appraisal$group == Control)
plot_arse(xcoord = as.integer(stress_appraisal[1,3:7]),
ycoord = c(mean(stress_appraisal[,8]),mean(stress_appraisal[,9]),mean(stress_appraisal[,10]),mean(stress_appraisal[,11]),
mean(stress_appraisal[,12])), ll=0, ul=100, xlab = "Trial Number", ylab = "Number of Pegs")
stress_appraisal <- filter(stress_appraisal, stress_appraisal$group == Control)
stress_appraisal <- filter(stress_appraisal, stress_appraisal$group == Control)
stress_appraisal
stress_appraisal <- filter(stress_appraisal, stress_appraisal$group == "Control")
stress_appraisal
stress_appraisal <- filter(stress_appraisal, group == "Control")
stress_appraisal
stress_appraisal <- filter(stress_appraisal, group == "Control")
stress_appraisal
plot_arse(xcoord = as.integer(stress_appraisal[1,3:7]),
ycoord = c(mean(stress_appraisal[,8]),mean(stress_appraisal[,9]),mean(stress_appraisal[,10]),mean(stress_appraisal[,11]),
mean(stress_appraisal[,12])), ll=0, ul=100, xlab = "Trial Number", ylab = "Number of Pegs")
stress_appraisal <- filter(as.tibble(stress_appraisal), group == "Control")
stress_appraisal <- filter(tibble(stress_appraisal), group == "Control")
stress_appraisal
stress_appraisal <- paste(stress_appraisal, group == "Control")
stress_appraisal <- stress_appraisal [which(stress_appraisal$group == "Control")]
stress_appraisal
stress_appraisal <- subset(stress_appraisal, group == "Control")
stress_appraisal <- subset(stress_appraisal, stress_appraisal$group == "Control")
stress_appraisal
stress_appraisal <- stress_appraisal[which stress_appraisal$group == "Control"]
stress_appraisal <- stress_appraisal[which(stress_appraisal$group == "Control")]
stress_appraisal <- stress_appraisal[which(stress_appraisal$group == 'Control')]
stress_appraisal <- stress_appraisal[which(stress_appraisal$group = 'Control')]
stress_appraisal <- stress_appraisal[which(stress_appraisal$group== 'Control')]
names(stress_appraisal)
stress_appraisal
# Required R packages that need to be loaded
library(arse)
library(dplyr)
library(pracma)
# Dataframe of stress_appraisal data set
head(stress_appraisal, 10) # shows the first ten rows of the 'stress_appraisal' ficticious data set found in the arse package
# Plot of ARSE for single subject
plot_arse(xcoord = as.integer(stress_appraisal[1,3:7]), ycoord = as.integer(stress_appraisal[1, 8:12]),
ll=0, ul=100, xlab = "Trial Number", ylab = "Number of Pegs")
stress_appraisal <- stress_appraisal[which(stress_appraisal$group== 'Control')]
names(stress_appraisal)
stress_appraisal
# Dataframe of stress_appraisal data set
head(stress_appraisal, 10) # shows the first ten rows of the 'stress_appraisal' ficticious data set found in the arse package
# Required R packages that need to be loaded
library(arse)
library(dplyr)
library(pracma)
devtools::load_all()
# Required R packages that need to be loaded
library(arse)
library(dplyr)
library(pracma)
# Dataframe of stress_appraisal data set
head(stress_appraisal, 10) # shows the first ten rows of the 'stress_appraisal' ficticious data set found in the arse package
stress_appraisal_sub <- stress_appraisal[which(stress_appraisal$group== 'Control')]
names(stress_appraisal)
stress_appraisal_sub <- stress_appraisal[which(stress_appraisal$group= 'Control')]
stress_appraisal_sub <- stress_appraisal[which(stress_appraisal$group== 'Control')]
names(stress_appraisal)
head(stress_appraisal)
head(stress_appraisal_sub)
head(stress_appraisal)
stress_appraisal_sub <- stress_appraisal[which(stress_appraisal$group== 'Control')]
head(stress_appraisal)
stress_appraisal_sub <- stress_appraisal[which(stress_appraisal$group== 'Control')]
attach(stress_appraisal)
stress_appraisal_sub <- stress_appraisal[which(stress_appraisal$group == 'Control')]
class(stress_appraisal)
head(stress_appraisal)
names(stress_appraisal)
stress_appraisal_sub <- subset(stress_appraisal, group == "Control", select( c("subj", "group", "tbx", "t1x", "t2x", "t3x", "t4x", "tby",   "t1y", "t2y", "t3y", "t4y")))
stress_appraisal_sub <- subset(stress_appraisal, group == "Control", select(c("subj", "group", "tbx", "t1x", "t2x", "t3x", "t4x", "tby",   "t1y", "t2y", "t3y", "t4y"))
stress_appraisal_sub
stress_appraisal_sub <- subset(stress_appraisal, group == "Control", select(c("subj", "group", "tbx", "t1x", "t2x", "t3x", "t4x", "tby", "t1y", "t2y", "t3y", "t4y")))
stress_appraisal_sub <- subset(stress_appraisal, group == "Control", select = c("subj", "group", "tbx", "t1x", "t2x", "t3x", "t4x", "tby", "t1y", "t2y", "t3y", "t4y"))
stress_appraisal_sub
stress_appraisal_control <- subset(stress_appraisal, group == "Control", select = c("subj", "group", "tbx", "t1x", "t2x", "t3x", "t4x", "tby", "t1y", "t2y", "t3y", "t4y"))
plot_arse(xcoord = as.integer(stress_appraisal_control_control[1,3:7]),
ycoord = c(mean(stress_appraisal_control[,8]),mean(stress_appraisal_control[,9]),mean(stress_appraisal_control[,10]),
mean(stress_appraisal_control[,11]), mean(stress_appraisal_control[,12])),
ll=0, ul=100, xlab = "Trial Number", ylab = "Number of Pegs")
stress_appraisal_control <- subset(stress_appraisal, group == "Control", select = c("subj", "group", "tbx", "t1x", "t2x", "t3x", "t4x", "tby", "t1y", "t2y", "t3y", "t4y"))
plot_arse(xcoord = as.integer(stress_appraisal_control[1,3:7]),
ycoord = c(mean(stress_appraisal_control[,8]),mean(stress_appraisal_control[,9]),mean(stress_appraisal_control[,10]),
mean(stress_appraisal_control[,11]), mean(stress_appraisal_control[,12])),
ll=0, ul=100, xlab = "Trial Number", ylab = "Number of Pegs")
stress_appraisal_control <- subset(stress_appraisal, group == "Appraisal_Training", select = c("subj", "group", "tbx", "t1x", "t2x", "t3x", "t4x", "tby", "t1y", "t2y", "t3y", "t4y"))
plot_arse(xcoord = as.integer(stress_appraisal_control[1,3:7]),
ycoord = c(mean(stress_appraisal_control[,8]),mean(stress_appraisal_control[,9]),mean(stress_appraisal_control[,10]),
mean(stress_appraisal_control[,11]), mean(stress_appraisal_control[,12])),
ll=0, ul=100, xlab = "Trial Number", ylab = "Number of Pegs")
stress_appraisal_group <- subset(stress_appraisal, group == "Control", select = c("subj", "group", "tbx", "t1x", "t2x", "t3x", "t4x", "tby", "t1y", "t2y", "t3y", "t4y"))
plot_arse(xcoord = as.integer(stress_appraisal_group[1,3:7]),
ycoord = c(mean(stress_appraisal_group[,8]),mean(stress_appraisal_group[,9]),mean(stress_appraisal_group[,10]),
mean(stress_appraisal_group[,11]), mean(stress_appraisal_group[,12])),
ll=0, ul=100, xlab = "Trial Number", ylab = "Number of Pegs")
stress_appraisal_group <- subset(stress_appraisal, group == "Appraisal_Training", select = c("subj", "group", "tbx", "t1x", "t2x", "t3x", "t4x", "tby", "t1y", "t2y", "t3y", "t4y"))
plot_arse(xcoord = as.integer(stress_appraisal_group[1,3:7]),
ycoord = c(mean(stress_appraisal_group[,8]),mean(stress_appraisal_group[,9]),mean(stress_appraisal_group[,10]),
mean(stress_appraisal_group[,11]), mean(stress_appraisal_group[,12])),
ll=0, ul=100, xlab = "Trial Number", ylab = "Number of Pegs")
library(devtools)
library(roxygen2)
devtools::use_vignette("arse_walkthrough")
devtools::load_all()
?vignette
devtools::build_vignettes()
devtools::build_win()
